C#
----------------------------------------------------------------
클래스 (Class)

객체마다 유형이 존재하는데, 같은 유형들로 분류가 가능하다
어떤 유형에 속하냐 하는것은 객체 클래스 이고 모든 객체는 클래스를 통해 생성된다.

클래스에 속하는 객체들을 클래스에 대한 인스턴스라 하며
클래스가 객체를 정의하므로 클래스는 객체를 정의하는 템플릿 이라 할수있다.

클래스는 필드(객체속성), 메소드(객체 행위)로 이루어져있다.
상수, 프로퍼티, 인덱서, 연산자 중복, 이벤트, 클래스형이나 델리게이트형같은 자료형이 클래스 안에 포함될 수 있다.

객체를 위한 클래스를 만드는일을 클래스 설계라 말한다.
----------------------------------------------------------------

프로퍼티 (Property)  --> 하나의 객체로 만들어서 사용? 객체라 생각해야하나?

프로퍼티란 클래스의 private 필드를 형식적으로 다루는 일종의 메소드로 간주 할 수 있다.
즉 클래스의 private필드는 정보 은닉을 위해 다른 클래스에서는 임의로 접근이 허용되지 않지만 대응되는 프로퍼티를 통하여 
다른 클래스에서 형식적으로 접근할 수 있는 방법이 제공되는 것이다.

일반적으로 하나의 프로퍼티는 값을 지정헤는 셋 접근자와 값을 참조하는 겟 접근자로 구성된다. 
프로퍼티는 마치 필드처럼 참조할 수 있으며 a를 프로퍼티라 했을 때 
a=b 일떄와 같이 배정문의 왼쪽에서 사용되면 셋 접근자, b=a와 같이 배정문의 오른쪽에서 사용되면 겟 접근자 호출
-----------------------------------------------------------------

연산자 중복(operator overloading)

연산자중복이란 시스템에서 제공한 연산자를 내가 직접 정의한 클래스에서 새로운 의미를 갖도록 재정의 하는것
예를 들어 짝수 하나를 저장할 수 있는 클래스에서 ++의 의미를 +2로 만드는것.
------------------------------------------------------------------

델리게이트(delegate)
 
메소드를 참조하기 위한 방법론 이벤트, 스레드를 처리하기위한 프로그래밍 기법으로 사용

델리게이트를 정의하기 위해서 먼저 델리게이트 객체를 통해 호출할 메소드를 작성해야한다. 
메소드가 작성되면 그에해당하는 델리게이트를 정의해야하며 이때 델리게이트 형태와 메소드 형태가 정확히 일치해야한다.

델리게이트할 메소드를 결정하고 델리게이트를 정의했다면 델리게이트 객체를 생성하면서 메소드를 연결한다.
------------------------------------------------------------------

이벤트...? 잘 모르겠다.





------------------------------------------------------------------

제네릭 (generics)
프로그래밍 언어에는 자료형이 존재하고 자료형에 따라 자료를 표현,저장,연산하는 방법이 다르기 때문에 동일한 작업도 자료형에 따라 각기 다른 프로그램을 작성해야한다.
같은 프로그램이여도 다른자료형으로 코드가 중복되기때문에 이를 해소하기위해 제네릭을 사용 (자료형을 매개변수로 가질 수 있음)
자료형에 해당하는 매개변수를 형 매개변수라 부르며 <>안에 넣는다.
-------------------------------------------------------------------

스레드 (thread)
순차 프로그램과 유사하게 시작, 실행 그리고 종료의 순서를 가진 제어의 흐름이다.
또한 멀티스레드 시스템이란 이와같은 스레드가 하나의 프로그램 내에 여러개 존재할 수 있는 시스템이다.

먼저 ThreadStart 델리게이트를 통해 스레드 몸체에 해당하는 메소드를 연결한 후 생성된 델리게이트 객체를 매개변수로 스레드 객체를 생성한다.
스레드 객체를 생성한 후 실제로 Start()메소드를 호출하여 스레드의 실행을 시작한다. 그러면 독립된 스레드가 작동되어 연결된 메소드를 실행하게된다.
---------------------------------------------------------------------

.NET 프레임워크

빠르게 변화하는 개발환경과 인터넷으로 집중되는 시대에 부응하기 위해 MS사가 만든 프로그램 개발 환경
MSIL(엠실)이라는 중간언어를 사용하여 통합된 프로그래밍 환경 제공
플랫폼에 독립적이면서 프로그램을 개발하기가 쉬워짐.

MSIL의 기능은 자바 언어의 바이트코드와 동일하지만 바이트코드는 자바 가상기계를 통한 인터프리티브 방법으로 실행,
MSIL은 JIT(Just In Time)방법에 의해 실행된다. 실행 적시에 컴파일하여 네이티브 코드로 변환하여 직접 실행하는 방법

.NET 프레임워크는 C#과 Visual Basic .NET, Managed C++, j#등의 언어들을 지원하지만 공통 언어 스펙을 따르는 언어라면
어떠한 프로그래밍 언어라 할지라도 공통언어런타임이라는 독립적인 환경에서 실행시킬 수 있다.
-------------------------------------------------------------------

공통 언어 스펙

약어로 CLS(Common Language Specification)라고 부르며 .NET 프레임워크를 지원하는 언어 사이의 상호 운용성을 
제공하는데 필요한 언어의 기능을 정의하기위한 스펙이다.

